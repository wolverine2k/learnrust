// https://projecteuler.net/problem=7
/*
    By listing the first six prime numbers: 2,3,5,7,11 and 13, we can see that the 6th prime is 13

    What is 10001 prime number?
*/
#[allow(dead_code)]
pub fn problem7() -> u32 {

}

// https://projecteuler.net/problem=6
/*
    The sum of the squares of the first ten natural numbers is
    1 sq + 2 sq + ... + 10 sq = 385

    The square of the sum of the first ten natural numbers is,
    (1+2+3+..+10) sq = 55 sq = 3025

    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
    3025 - 385 = 2640

    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
#[allow(dead_code)]
pub fn problem6() -> u32 {
    let mut sum_natural: u32 = 0;
    let mut sum_squares: u32 = 0;
    for n in 1..101 {
        sum_natural = sum_natural + (n * n) ;
        sum_squares += n;
    }
    sum_squares = sum_squares * sum_squares;
    return sum_squares - sum_natural;
}


// https://projecteuler.net/problem=5
/*
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
#[allow(dead_code)]
pub fn problem5() -> u32 {
    let mut number = 2500;
    let mut result = true;
    'iterateagain: loop {
        let mut count = 20;
        while count > 0 {
            if number % count == 0 {
                count -= 1;
            } else {
                result = false;
                break;
            }
        }
        if !result {
            number += 1;
            result = true;
        } else {
            break 'iterateagain;
        }
    }
    return number;
}

// https://projecteuler.net/problem=4
/*
    A palindromic number reads the same both ways. The largest palindrome made from the product of two
    2-digit numbers is 9009 = 91 x 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
*/
#[allow(dead_code)]
pub fn problem4() -> u64 {
    // Since we need to find the largest palindrome, lets start with the higher 3-digit number
    let mut num1 = 999;
    let mut num2 = 999;
    let mut palindrome = 0;
    while num1 > 99 {
        while num2 > 99 {
            let x = num1 * num2;
            // Convert to string for easier comparison
            let x: String = x.to_string();
            let y = x.chars().rev().collect::<String>();
            if x.eq(&y) {
                if x.parse::<u64>().unwrap() > palindrome {
                    //println!("{} {}", num1, num2);
                    palindrome = x.parse::<u64>().unwrap();
                }
            }
            num2 -= 1;
        }
        num2 = 999;
        num1 -= 1;
    }
    return palindrome;
}

// https://projecteuler.net/problem=3
/*
    The prime factors of 13195 are 5,7,13 and 29
    What is the largest prime factor of the number 600851475143
*/
#[allow(dead_code)]
pub fn problem3(mut number: u64) -> u64 {
    let mut divisor = 2; // Always initialize the divisor by 2 as 1 is N/A
    while number > 1 { // Last division will always yield 1
        if number % divisor == 0 {
            // OK to be divided
            number /= divisor;
        } else {
            divisor += 1;
        }
    }
    return divisor;
}

// https://projecteuler.net/problem=2
/*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
    1 and 2, the first 10 terms will be:
    1,2,3,5,8,13,21,34,55,89,...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
#[allow(dead_code)]
pub fn problem2(max_number: u32) -> u32 {
    let mut result_sum: u32 = 2;    // Start with 2 cause 2 is initialized in the fib
    let mut second: u32 = 2;
    let mut fib: u32 = 1;
    while fib < max_number {
        fib += second;
        if fib % 2 == 0 {
            result_sum += fib;
        }
        std::mem::swap(&mut fib, &mut second);
    }
    return result_sum;
}


// https://projecteuler.net/problem=1
/* 
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3,5,6,9 and 
    The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
#[allow(dead_code)]
pub fn problem1(max_number: u32) -> u32 {
    let mut result_sum: u32 = 0;
    let mut count: u32 = 0;
    while count < max_number {
        if count % 3 == 0 || 
        count % 5 == 0 {
            result_sum += count;
        }
        count += 1;
    }
    return result_sum;
}